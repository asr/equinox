
entrypoints Tffs ;

comment "%";

Tffs.  Tffs  ::= [Tff];

terminator Tff "." ;

TffIncl. Tff ::= "include" "(" FPath ")" ;
TffTyp. Tff  ::= "tff" "(" LIdent "," "type" "," "(" LIdent ":" Type ")" ")";
Tff.    Tff  ::= "tff" "(" LIdent "," ClauseType "," Expr ")";

token FPath '\'' ('/' | '_' | '^' | '.' | letter | digit)* '\'';

CTDef.     ClauseType ::= "definition";
CTAxiom.   ClauseType ::= "axiom";
CTHyp.     ClauseType ::= "hypothesis";
CTConj.    ClauseType ::= "conjecture";
CTNegConj. ClauseType ::= "negated_conjecture";

ETyp. ETyp ::= UIdent ":" Type;

EOr.      Expr   ::= Expr1 "|" Expr  ;
EAnd.     Expr1  ::= Expr2 "&" Expr1 ;
EImplies. Expr2  ::= Expr3 "=>" Expr2 ;
EEquiv.   Expr2  ::= Expr3 "<=>" Expr2 ;
EEq.      Expr2  ::= Term "=" Term ;
ENeq.     Expr2  ::= Term "!=" Term ;

ENeg.     Expr4  ::= "~" Expr4;
EForAll.  Expr4  ::= "!" "[" [ETyp] "]" ":" Expr4 ;  
EExists.  Expr4  ::= "?" "[" [ETyp] "]" ":" Expr4 ;
ETrue.    Expr5  ::= "$true";
EFalse.   Expr5  ::= "$false";
ELit.     Expr5  ::= Atom;

TConst.   Term ::= LIdent;
TVar.     Term ::= UIdent;
TFun.     Term ::= LIdent "(" [Term] ")";

APred.    Atom ::= LIdent "(" [Term] ")";
AConst.   Atom ::= LIdent;

separator Term ",";

token LIdent (lower | '$') (letter | '_' | digit)*;
token UIdent upper (letter | '_' | digit)*;

coercions Expr 5;

TypTyp.    Type  ::= "$tType";
TypBool.   Type  ::= "$o";
TypConst.  Type  ::= BaseType;
TypPred.   Type  ::= Arguments ">" "$o";
TypFun.    Type  ::= Arguments ">" BaseType;

OneArg.    Arguments ::= BaseType;
SomeArgs.  Arguments ::= "(" [Arg] ")";

TypTop.    BaseType  ::= "$i";
TypIdent.  BaseType  ::= LIdent;

Arg.       Arg ::= BaseType;
separator  Arg "*";

separator ETyp ",";

%fof(axiom, axiom,
%  ![X,Xs] : (
%    sub(Xs, cons(X,Xs))
%  )
%).

% we might just state transitivity as well...
%fof(axiom, axiom,
%  ![X,Xs,Ys] : (
%    sub(Xs,Ys) => sub(Xs, cons(X,Ys))
%  )
%).

%fof(axiom, axiom,
%  ![Xs,Ys,Zs] : (
%    (sub(Xs,Ys) & sub(Ys,Zs)) => sub(Xs,Zs)
%  )
%).

%fof(axiom, axiom,
%  ![Xs] : (
%    list(Xs) => ~sub(Xs,Xs)
%  )
%).

fof(axiom, axiom,
  ![Xs] : (
    ~list(Xs) => Xs = undefined
  )
).

fof(axiom,axiom, (
    ps = rev(cons(a,as)) % app(rev(as),cons(a,nil))
  & qs = app(as,cons(a,nil))
  & list(ps)
  & list(qs)
  & ps != qs
  )
).

fof(axiom, axiom,
![Xs] : (
    list(Xs) =>
    (
     ~ tail(tail(tail(tail(tail(tail(Xs)))))) = Xs &
     ~ tail(tail(tail(tail(tail(Xs))))) = Xs &
     ~ tail(tail(tail(tail(Xs)))) = Xs 
%     ~ tail(tail(tail(Xs))) = Xs
%     ~ tail(tail(Xs)) = Xs &
%     ~ tail(Xs) = Xs
     )
  )
).

fof(axiom, axiom,
  ![X,Xs] : (
    list(cons(X,Xs)) => (elem(X) & list(Xs))
  )
).

fof(axiom, axiom,
  ![Xs] : (
    list(rev(Xs)) => list(Xs)
  )
).

fof(axiom, axiom,
  ![Xs,Ys] : (
    list(app(Xs,Ys)) => (list(Xs) & list(Ys))
  )
).

fof(axiom, axiom,
  ![Xs] : (
    list(Xs) => (Xs = nil | Xs = cons(head(Xs),tail(Xs)))
  )
).

fof(axiom, axiom,
  ![X,Xs] : (
    list(cons(X,Xs)) => (head(cons(X,Xs)) = X & tail(cons(X,Xs)) = Xs)
  )
).

fof(axiom, axiom,
  ![X,Xs] : (
    (list(nil) & list(cons(X,Xs))) => (nil != cons(X,Xs))
  )
).

fof(axiom, axiom,
  ![X,Xs] : (
    rev(nil) = nil &
    (list(cons(X,Xs)) => rev(cons(X,Xs)) = app(rev(Xs),cons(X,nil)))
  )
).

fof(axiom, axiom,
  ![X,Xs,Ys] : (
    app(nil,Ys) = Ys &
    (list(cons(X,Xs)) => app(cons(X,Xs),Ys) = cons(X,app(Xs,Ys)))
  )
).


